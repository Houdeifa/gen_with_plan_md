# Creating an Android Snake Game with Kivy

I'll guide you through creating a Snake game app for Android using Kivy. Here's the implementation plan with code examples and explanations for each step.

## Step 1: Set up the Project Environment

First, let's set up our development environment:

1. Install the required packages:
```bash
pip install kivy buildozer
```

2. Create a project structure:
```
snake_game/
├── main.py
├── snakegame.kv
├── assets/
│   ├── images/
│   │   ├── classic_skin/
│   │   ├── neon_skin/
│   │   └── pixel_skin/
│   └── sounds/
├── screens/
│   ├── game_screen.py
│   ├── menu_screen.py
│   ├── shop_screen.py
│   └── settings_screen.py
├── models/
│   ├── snake.py
│   ├── food.py
│   └── player.py
└── utils/
    ├── constants.py
    └── currency_manager.py
```

## Step 2: Implement the Basic Game Logic

Let's start with the core game logic:

### models/snake.py
```python
class Snake:
    def __init__(self, initial_pos=(5, 5), initial_length=3):
        self.positions = [initial_pos]
        # Add initial body segments
        for i in range(1, initial_length):
            self.positions.append((initial_pos[0], initial_pos[1] - i))
        self.direction = (0, 1)  # Initial direction: up
        self.next_direction = self.direction
        self.length = initial_length
        
    def move(self):
        self.direction = self.next_direction
        head_x, head_y = self.positions[0]
        dir_x, dir_y = self.direction
        new_head = (head_x + dir_x, head_y + dir_y)
        self.positions.insert(0, new_head)
        
        # Remove the tail if not growing
        if len(self.positions) > self.length:
            self.positions.pop()
            
    def grow(self):
        self.length += 1
        
    def change_direction(self, new_direction):
        # Prevent 180-degree turns
        opposite_directions = {
            (0, 1): (0, -1),
            (0, -1): (0, 1),
            (1, 0): (-1, 0),
            (-1, 0): (1, 0)
        }
        
        if new_direction != opposite_directions.get(self.direction):
            self.next_direction = new_direction
            
    def check_collision_with_self(self):
        return self.positions[0] in self.positions[1:]
```

### models/food.py
```python
import random

class Food:
    def __init__(self, grid_size=(20, 20)):
        self.grid_size = grid_size
        self.position = self.generate_position([])
        
    def generate_position(self, occupied_positions):
        while True:
            position = (random.randint(0, self.grid_size[0] - 1), 
                        random.randint(0, self.grid_size[1] - 1))
            if position not in occupied_positions:
                return position
                
    def respawn(self, occupied_positions):
        self.position = self.generate_position(occupied_positions)
```

### models/player.py
```python
class Player:
    def __init__(self):
        self.score = 0
        self.currency = 0
        self.owned_skins = ["classic"]
        self.current_skin = "classic"
        self.high_score = 0
        
    def update_score(self, points):
        self.score += points
        if self.score > self.high_score:
            self.high_score = self.score
            
    def reset_score(self):
        self.score = 0
        
    def add_currency(self, amount):
        self.currency += amount
        
    def buy_skin(self, skin_name, price):
        if skin_name not in self.owned_skins and self.currency >= price:
            self.currency -= price
            self.owned_skins.append(skin_name)
            return True
        return False
        
    def select_skin(self, skin_name):
        if skin_name in self.owned_skins:
            self.current_skin = skin_name
            return True
        return False
```

## Step 3: Create Game Screen

### screens/game_screen.py
```python
from kivy.uix.screenmanager import Screen
from kivy.clock import Clock
from kivy.uix.widget import Widget
from kivy.graphics import Rectangle, Color
from kivy.core.window import Window
from kivy.uix.label import Label

from models.snake import Snake
from models.food import Food

class GameWidget(Widget):
    def __init__(self, **kwargs):
        super(GameWidget, self).__init__(**kwargs)
        self.game_screen = kwargs.get('game_screen')
        self.cell_size = 20
        self.grid_size = (20, 20)
        self.snake = Snake(initial_pos=(10, 10))
        self.food = Food(self.grid_size)
        self.paused = False
        self.game_over = False
        
        # Set up keyboard controls
        self._keyboard = Window.request_keyboard(self._keyboard_closed, self)
        self._keyboard.bind(on_key_down=self._on_keyboard_down)
        
        # Start game loop
        Clock.schedule_interval(self.update, 1.0/10.0)  # 10 FPS for snake movement
        
    def _keyboard_closed(self):
        self._keyboard.unbind(on_key_down=self._on_keyboard_down)
        self._keyboard = None
        
    def _on_keyboard_down(self, keyboard, keycode, text, modifiers):
        key = keycode[1]
        
        if key == 'up':
            self.snake.change_direction((0, 1))
        elif key == 'down':
            self.snake.change_direction((0, -1))
        elif key == 'left':
            self.snake.change_direction((-1, 0))
        elif key == 'right':
            self.snake.change_direction((1, 0))
        elif key == 'p':
            self.paused = not self.paused
        elif key == 'r' and self.game_over:
            self.reset_game()
            
        return True
        
    def update(self, dt):
        if self.paused or self.game_over:
            return
            
        # Move snake
        self.snake.move()
        
        # Check for food collision
        if self.snake.positions[0] == self.food.position:
            self.snake.grow()
            self.game_screen.player.update_score(10)
            self.food.respawn(self.snake.positions)
            
        # Check for wall collision
        head_x, head_y = self.snake.positions[0]
        if (head_x < 0 or head_x >= self.grid_size[0] or 
            head_y < 0 or head_y >= self.grid_size[1]):
            self.game_over = True
            
        # Check for self collision
        if self.snake.check_collision_with_self():
            self.game_over = True
            
        # Add currency for score milestones
        if self.game_screen.player.score > 0 and self.game_screen.player.score % 100 == 0:
            self.game_screen.player.add_currency(5)
            
        # Update the canvas
        self.canvas.clear()
        
        with self.canvas:
            # Draw game board background
            Color(0.1, 0.1, 0.1)
            Rectangle(pos=self.pos, size=self.size)
            
            # Draw snake
            for i, (x, y) in enumerate(self.snake.positions):
                if i == 0:  # Head
                    Color(0.7, 0.7, 0.1)
                else:  # Body
                    Color(0.8, 0.8, 0.2) if i % 2 == 0 else Color(0.7, 0.7, 0.1)
                
                Rectangle(pos=(x * self.cell_size, y * self.cell_size), 
                          size=(self.cell_size, self.cell_size))
            
            # Draw food
            Color(1, 0.2, 0.2)
            Rectangle(pos=(self.food.position[0] * self.cell_size, 
                          self.food.position[1] * self.cell_size),
                     size=(self.cell_size, self.cell_size))
                     
        # Update score display
        self.game_screen.update_score_display()
        
    def reset_game(self):
        self.snake = Snake(initial_pos=(10, 10))
        self.food = Food(self.grid_size)
        self.game_over = False
        self.paused = False
        self.game_screen.player.reset_score()

class GameScreen(Screen):
    def __init__(self, **kwargs):
        super(GameScreen, self).__init__(**kwargs)
        self.player = kwargs.get('player')
        self.game_widget = None
        
    def on_enter(self):
        self.game_widget = GameWidget(game_screen=self, size=self.size)
        self.add_widget(self.game_widget)
        
        # Add score label
        self.score_label = Label(text=f"Score: {self.player.score}", 
                                pos_hint={'top': 1, 'right': 1},
                                size_hint=(None, None), size=(200, 50))
        self.add_widget(self.score_label)
        
    def on_leave(self):
        self.remove_widget(self.game_widget)
        self.remove_widget(self.score_label)
        
    def update_score_display(self):
        self.score_label.text = f"Score: {self.player.score}"
```

## Step 4: Create Menu and Shop Screens

### screens/menu_screen.py
```python
from kivy.uix.screenmanager import Screen
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label

class MenuScreen(Screen):
    def __init__(self, **kwargs):
        super(MenuScreen, self).__init__(**kwargs)
        self.player = kwargs.get('player')
        
        layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        # Title
        title = Label(text="Snake Game", font_size=32, size_hint_y=0.2)
        layout.add_widget(title)
        
        # Play button
        play_button = Button(text="Play Game", size_hint_y=0.15)
        play_button.bind(on_press=self.start_game)
        layout.add_widget(play_button)
        
        # Shop button
        shop_button = Button(text="Skin Shop", size_hint_y=0.15)
        shop_button.bind(on_press=self.open_shop)
        layout.add_widget(shop_button)
        
        # Settings button
        settings_button = Button(text="Settings", size_hint_y=0.15)
        settings_button.bind(on_press=self.open_settings)
        layout.add_widget(settings_button)
        
        # High score display
        self.high_score_label = Label(
            text=f"High Score: {self.player.high_score}",
            size_hint_y=0.15
        )
        layout.add_widget(self.high_score_label)
        
        # Currency display
        self.currency_label = Label(
            text=f"Currency: {self.player.currency}",
            size_hint_y=0.15
        )
        layout.add_widget(self.currency_label)
        
        self.add_widget(layout)
        
    def on_enter(self):
        # Update displays when returning to this screen
        self.high_score_label.text = f"High Score: {self.player.high_score}"
        self.currency_label.text = f"Currency: {self.player.currency}"
        
    def start_game(self, instance):
        self.manager.current = 'game'
        
    def open_shop(self, instance):
        self.manager.current = 'shop'
        
    def open_settings(self, instance):
        self.manager.current = 'settings'
```

### screens/shop_screen.py
```python
from kivy.uix.screenmanager import Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.scrollview import ScrollView
from kivy.uix.gridlayout import GridLayout
from kivy.uix.image import Image

class SkinItem(BoxLayout):
    def __init__(self, name, price, owned, **kwargs):
        super(SkinItem, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.size_hint_y = None
        self.height = 200
        self.padding = 10
        self.spacing = 5
        
        # Skin preview
        self.add_widget(Image(source=f'assets/images/{name}_skin/preview.png'))
        
        # Skin name
        self.add_widget(Label(text=name.capitalize(), size_hint_y=0.2))
        
        # Button (Buy or Select)
        if owned:
            btn = Button(text="Select", size_hint_y=0.2)
            btn.name = name
            btn.bind(on_press=kwargs.get('on_select'))
        else:
            btn = Button(text=f"Buy ({price})", size_hint_y=0.2)
            btn.name = name
            btn.price = price
            btn.bind(on_press=kwargs.get('on_buy'))
            
        self.add_widget(btn)

class ShopScreen(Screen):
    def __init__(self, **kwargs):
        super(ShopScreen, self).__init__(**kwargs)
        self.player = kwargs.get('player')
        
        # Available skins with their prices
        self.skins = {
            "classic": 0,      # Free
            "neon": 100,
            "pixel": 150,
            "retro": 200,
            "rainbow": 300
        }
        
        self.layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        # Header with back button and currency
        header = BoxLayout(size_hint_y=0.1)
        back_button = Button(text="Back", size_hint_x=0.3)
        back_button.bind(on_press=self.go_back)
        header.add_widget(back_button)
        
        self.currency_label = Label(text=f"Currency: {self.player.currency}")
        header.add_widget(self.currency_label)
        
        # Add currency button (for development, would be replaced with real payment)
        add_money_button = Button(text="+50", size_hint_x=0.2)
        add_money_button.bind(on_press=self.add_currency)
        header.add_widget(add_money_button)
        
        self.layout.add_widget(header)
        
        # Scrollable grid for skins
        scroll = ScrollView()
        self.grid = GridLayout(cols=2, spacing=10, size_hint_y=None)
        self.grid.bind(minimum_height=self.grid.setter('height'))
        
        # Add skins to grid
        self.update_skin_grid()
        
        scroll.add_widget(self.grid)
        self.layout.add_widget(scroll)
        
        self.add_widget(self.layout)
        
    def update_skin_grid(self):
        self.grid.clear_widgets()
        
        for skin_name, price in self.skins.items():
            owned = skin_name in self.player.owned_skins
            self.grid.add_widget(
                SkinItem(skin_name, price, owned, 
                         on_buy=self.buy_skin, 
                         on_select=self.select_skin)
            )
            
    def buy_skin(self, instance):
        if self.player.buy_skin(instance.name, instance.price):
            self.update_skin_grid()
            self.currency_label.text = f"Currency: {self.player.currency}"
            
    def select_skin(self, instance):
        if self.player.select_skin(instance.name):
            # Update the active skin in the game
            pass
            
    def add_currency(self, instance):
        self.player.add_currency(50)
        self.currency_label.text = f"Currency: {self.player.currency}"
        
    def on_enter(self):
        self.currency_label.text = f"Currency: {self.player.currency}"
        self.update_skin_grid()
        
    def go_back(self, instance):
        self.manager.current = 'menu'
```

### screens/settings_screen.py
```python
from kivy.uix.screenmanager import Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.slider import Slider

class SettingsScreen(Screen):
    def __init__(self, **kwargs):
        super(SettingsScreen, self).__init__(**kwargs)
        
        layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        # Header with title and back button
        header = BoxLayout(size_hint_y=0.1)
        back_button = Button(text="Back", size_hint_x=0.3)
        back_button.bind(on_press=self.go_back)
        header.add_widget(back_button)
        
        title = Label(text="Settings", font_size=24)
        header.add_widget(title)
        
        # Empty widget for alignment
        header.add_widget(Label(size_hint_x=0.3))
        
        layout.add_widget(header)
        
        # Game speed setting
        speed_layout = BoxLayout(size_hint_y=0.15)
        speed_layout.add_widget(Label(text="Game Speed"))
        
        self.speed_slider = Slider(min=1, max=20, value=10)
        speed_layout.add_widget(self.speed_slider)
        
        self.speed_value_label = Label(text="10")
        speed_layout.add_widget(self.speed_value_label)
        
        # Bind the slider to update the label
        self.speed_slider.bind(value=self.update_speed_label)
        
        layout.add_widget(speed_layout)
        
        # Sound volume setting
        volume_layout = BoxLayout(size_hint_y=0.15)
        volume_layout.add_widget(Label(text="Sound Volume"))
        
        self.volume_slider = Slider(min=0, max=100, value=50)
        volume_layout.add_widget(self.volume_slider)
        
        self.volume_value_label = Label(text="50%")
        volume_layout.add_widget(self.volume_value_label)
        
        # Bind the slider to update the label
        self.volume_slider.bind(value=self.update_volume_label)
        
        layout.add_widget(volume_layout)
        
        # Reset high score button
        reset_button = Button(text="Reset High Score", size_hint_y=0.15)
        reset_button.bind(on_press=self.reset_high_score)
        layout.add_widget(reset_button)
        
        # Fillers for spacing
        layout.add_widget(Label())
        
        self.add_widget(layout)
        
    def update_speed_label(self, instance, value):
        self.speed_value_label.text = str(int(value))
        
    def update_volume_label(self, instance, value):
        self.volume_value_label.text = f"{int(value)}%"
        
    def reset_high_score(self, instance):
        if hasattr(self.manager, 'player'):
            self.manager.player.high_score = 0
        
    def go_back(self, instance):
        self.manager.current = 'menu'
```

## Step 5: Implement the Main Application

### main.py
```python
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager
from kivy.core.window import Window

from screens.menu_screen import MenuScreen
from screens.game_screen import GameScreen
from screens.shop_screen import ShopScreen
from screens.settings_screen import SettingsScreen
from models.player import Player

class SnakeGameApp(App):
    def build(self):
        # Set window size for desktop development
        Window.size = (400, 600)
        
        # Create player model
        self.player = Player()
        
        # Create the screen manager
        self.screen_manager = ScreenManager()
        
        # Add screens
        self.menu_screen = MenuScreen(name='menu', player=self.player)
        self.game_screen = GameScreen(name='game', player=self.player)
        self.shop_screen = ShopScreen(name='shop', player=self.player)
        self.settings_screen = SettingsScreen(name='settings')
        
        self.screen_manager.add_widget(self.menu_screen)
        self.screen_manager.add_widget(self.game_screen)
        self.screen_manager.add_widget(self.shop_screen)
        self.screen_manager.add_widget(self.settings_screen)
        
        return self.screen_manager

if __name__ == '__main__':
    SnakeGameApp().run()
```

## Step 6: Create KV File for UI Styling

### snakegame.kv
```kivy
#:kivy 2.0.0

<Button>:
    background_normal: ''
    background_color: 0.3, 0.6, 0.3, 1
    font_size: 18
    
<Label>:
    font_size: 18
    color: 1, 1, 1, 1
    
<SkinItem>:
    canvas.before:
        Color:
            rgba: 0.2, 0.2, 0.2, 1
        Rectangle:
            pos: self.pos
            size: self.size
```

## Step 7: Build for Android with Buildozer

Create a buildozer.spec file for Android deployment:

```
# buildozer.spec
[app]
title = Snake Game
package.name = snakegame
package.domain = org.example
source.dir = .
source.include_exts = py,png,jpg,kv,atlas
version = 0.1
requirements = python3,kivy
orientation = portrait
android.permissions = INTERNET
android.arch = armeabi-v7a
android.api = 28

[buildozer]
log_level = 2
```

Then build the APK:
```bash
buildozer android debug
```

## Step 8: Future Payment Integration

For real payment integration, you can use Google's In-App Billing API. The implementation will involve:

1. Adding the billing library to your buildozer.spec requirements
2. Creating a Python wrapper for the Android billing API using Kivy's PyJNIus
3. Implementing purchase flows for your skins

A basic outline for this would be:

```python
# In utils/payment_manager.py
from jnius import autoclass

class PaymentManager:
    def __init__(self):
        # Set up Google Play Billing client
        self.billing_client = None
        self.setup_billing()
        
    def setup_billing(self):
        # Initialize the billing client using PyJNIus
        BillingClient = autoclass('com.android.billingclient.api.BillingClient')
        # ... setup code ...
        
    def purchase_currency(self, sku, callback):
        # Initiate purchase flow for the specified SKU
        # ... purchase code ...
        
    def process_purchase_result(self, result):
        # Handle purchase completion
        # ... processing code ...
```

## Conclusion

This code provides you with a complete framework for a Snake game with multiple skins and an in-game shop. The game features:

1. Classic Snake gameplay with keyboard controls
2. Multiple screens for game, menus, settings, and shop
3. In-game currency system for purchasing skins
4. High score tracking

To extend the game, you might want to add:
- More varied food items with different point values
- Obstacles that appear as the score increases
- Level progression with increasing difficulty
- Sound effects and background music
- Animations for the snake and UI elements

The current implementation uses a basic placeholder for the payment system, which you can replace with real payment integration once you're ready to publish the app.